// Generated by CoffeeScript 1.4.0
(function() {
  var _matchesSelector, _specificity;

  $.specificity = function(selector, options) {
    var element, highestSpecificity, sel, selectors, spec, specifities, _i, _len;
    if (options == null) {
      options = {};
    }
    if (options.element) {
      element = options.element;
      if (element instanceof jQuery) {
        element = element[0];
      }
      selectors = selector.split(',');
      specifities = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = selectors.length; _i < _len; _i++) {
          sel = selectors[_i];
          if (_matchesSelector(element, sel)) {
            _results.push(_specificity(sel));
          }
        }
        return _results;
      })();
      highestSpecificity = 0;
      for (_i = 0, _len = specifities.length; _i < _len; _i++) {
        spec = specifities[_i];
        if (spec > highestSpecificity) {
          highestSpecificity = spec;
        }
      }
      return highestSpecificity;
    } else {
      return _specificity(selector);
    }
  };

  _specificity = function(selector) {
    var m, matches, p, result, sel, selectors, specificity, tmp, _i, _j, _len, _len1;
    specificity = [0, 0, 0, 0, 0];
    tmp = 0;
    selectors = selector.split(/\s*,\s*/);
    for (_i = 0, _len = selectors.length; _i < _len; _i++) {
      sel = selectors[_i];
      matches = sel.match(/#/g);
      if (matches) {
        specificity[1] += matches.length;
      }
      matches = sel.match(/\./g);
      if (matches) {
        specificity[2] += matches.length;
      }
      matches = sel.match(/\[.+\]/g);
      if (matches) {
        specificity[2] += matches.length;
      }
      matches = sel.match(/:(?:first-letter|first-line|before|after|:selection)/g);
      if (matches) {
        tmp = matches.length;
        specificity[3] += tmp;
      }
      matches = sel.match(/:/g);
      if (matches) {
        specificity[2] += matches.length - tmp;
      }
      tmp = 0;
      matches = sel.match(/[+>~]/g);
      if (matches) {
        specificity[4] += matches.length;
      }
      sel = sel.replace(/\(.*?\)/g, "").replace(/\[.*?\]/g, "").replace(/[.#:][^ +>~]*/ig, "");
      matches = sel.match(/[^ +>~]+/g);
      if (matches) {
        specificity[3] += matches.length;
      }
    }
    m = 10000;
    result = 0;
    for (_j = 0, _len1 = specificity.length; _j < _len1; _j++) {
      p = specificity[_j];
      result += p * m;
      m /= 10;
    }
    return result;
  };

  _matchesSelector = function(element, selector) {
    var fn;
    fn = element.matchesSelector || element.mozMatchesSelector || element.webkitMatchesSelector;
    try {
      return fn.call(element, selector);
    } catch (e) {

    }
    return null;
  };

}).call(this);
